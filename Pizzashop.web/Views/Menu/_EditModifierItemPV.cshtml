@model Pizzashop.entity.ViewModels.AddModifierViewModel


<div class="modal fade" id="Editmodifier" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" >
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <form method="post" id="EditModifierForm">
                <input type="hidden" asp-for="ModifierId" id="EditModifierId">
                <div id="editModifierInputsContainer"></div>
                <div class="modal-header">
                    <h1 class="modal-title fs-5">Edit Modifier</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col">
                                    <div class="dropdown">
                                        <button class="btn dropdown-toggle w-100 bg-white p-3 d-flex border border-secondary"
                                            type="button" id="EditModifierGroupDropdown" data-bs-toggle="dropdown"
                                            aria-expanded="false">
                                            Select Modifier Group
                                        </button>
                                        <ul class="dropdown-menu w-100" id="EditModifierGroupList">
                                        </ul>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating mb-3">
                                        <input type="text" class="form-control" id="EditModifierName" placeholder="Name*" 
                                            asp-for="ModifierName" required>
                                        <label for="EditModifierName">Name*</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-floating mb-3">
                                        <input type="number" class="form-control" id="EditModifierRate" placeholder="Rate"
                                            asp-for="Rate" value="0" min="0" step="0.01" required>
                                        <label for="EditModifierRate">Rate*</label>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating mb-3">
                                        <input type="number" class="form-control" id="EditModifierQuantity" asp-for="Quantity" 
                                            placeholder="Quantity" value="0" min="0" required>
                                        <label for="EditModifierQuantity">Quantity*</label>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating">
                                        <select class="form-select" asp-for="UnitId" id="EditUnitSelect" required>
                                            <option value="">Select Unit</option>
                                        </select>
                                        <label for="EditUnitSelect">Unit*</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-floating mb-3">
                                    <textarea class="form-control" placeholder="Description" id="EditModifierDescription" 
                                        style="height: 100px" asp-for="Description"></textarea>
                                    <label for="EditModifierDescription">Description</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">     
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                     <button type="submit" class="btn btn-primary">Update</button>
                </div>
            </form>
        </div>
    </div>
</div>



<script>
   
    
    
    loadUnits();
    
    $(document).on('click', '.edit-modifier-button', function() {
        const modifierId = $(this).data('item-id');
        openEditModal(modifierId);
    });
    
    $("#EditModifierForm").submit(function(e) {
        e.preventDefault();
        if (!validateEditForm()) return;

        console.log(new FormData(this))
        
        updateHiddenInputs('editModifierInputsContainer', editSelectedModifierGroups, 'SelectedModifierIds');
        
        $.ajax({
            url: "/Menu/_EditModifierItemPV",
            type: "POST",
            data: new FormData(this),
            processData: false,
            contentType: false,
            success: function(response) {
                if (response) {
                    if (response.success == true) {
                    toastr.success(response.message)
                }
                else {
                    toastr.error(response.message)
                }
                    $('#Editmodifier').modal('hide');
                  
                    const firstCategoryLink = document.querySelector('.modifier-item-sidebar');
    if (firstCategoryLink) {

        const firstCategoryId = firstCategoryLink.getAttribute('data-id');
        currentModifierGroup = firstCategoryId;
        modifierItem(currentModifierGroup, currentPageModifier, ModifierpageSize, Modifiersearch);
    }
                   
                } 
            },
            error: function(xhr) {
                showAlert('error', 'An error occurred while updating modifier');
                console.error("Error:", xhr.responseText);
            }
        });
    });
    
    // Function to open edit modal
    function openEditModal(modifierId) {
       // resetEditForm();
        
        $.ajax({
            url: '/Menu/_EditModifierItemPV',
            type: 'GET',
            data: { id: modifierId },
            success: function(response) {
                if (response) {

                    console.log("SelectedModifierIds",response);
                    // Populate form fields
                    $('#EditModifierId').val(response.modifierId);
                    $('#EditModifierName').val(response.modifierName);
                    $('#EditModifierRate').val(response.rate);
                    $('#EditModifierQuantity').val(response.quantity);
                    $('#EditModifierDescription').val(response.description);
                    $('#EditUnitSelect').val(response.unitId);
                    
                    // Load and set modifier groups
                    editSelectedModifierGroups = response.selectedModifierIds || [];
                    loadModifierGroupsForEdit(editSelectedModifierGroups);
                    
                    // Show modal
                    $('#Editmodifier').modal('show');
                }
            },
            error: function() {
                showAlert('error', 'Failed to load modifier details');
            }
        });
    }
    
     function loadModifierGroupsForEdit(selectedGroupIds) {
        $.ajax({
            url: "/Menu/GetAllModifierGroup",
            type: "GET",
            success: function(groups) {
                const dropdown = $("#EditModifierGroupList");
                dropdown.empty();
                
                groups.forEach(group => {
                    // Check if this group is in the selectedGroupIds array
                    const isChecked = selectedGroupIds.includes(group.modifierGroupId);
                    ;
                    dropdown.append(`
                        <li class="ms-3">
                            <div class="form-check me-4">
                                <input class="form-check-input edit-modifier-group-checkbox" 
                                    id="edit-group-${group.modifierGroupId}" 
                                    type="checkbox" 
                                    value="${group.modifierGroupId}"
                                    data-name="${group.groupName}"
                                    ${isChecked ? 'checked' : ''}>
                                <label class="form-check-label" for="edit-group-${group.modifierGroupId}">
                                    ${group.groupName}
                                </label>
                            </div>
                        </li>
                    `);
                });
                
                // Update dropdown button text to show selected groups
                updateEditDropdownButtonText();
                
                // Handle checkbox changes
                $(".edit-modifier-group-checkbox").change(function() {
                    const groupId = parseInt($(this).val());
                    if ($(this).is(":checked")) {
                        if (!editSelectedModifierGroups.includes(groupId)) {
                            editSelectedModifierGroups.push(groupId);
                        }
                    } else {
                        editSelectedModifierGroups = editSelectedModifierGroups.filter(id => id !== groupId);
                    }
                    updateEditDropdownButtonText();
                });
            },
            error: function() {
                showAlert('error', "Failed to load modifier groups");
            }
        });
    }
    
    // Function to load units
    function loadUnits() {
        $.ajax({
            url: "/Menu/GetAllUnit",
            type: "GET",
            success: function(units) {
                const editSelect = $("#EditUnitSelect");
                editSelect.find('option:not(:first)').remove();
                
                units.forEach(unit => {
                    editSelect.append(`<option value="${unit.unitId}">${unit.unitName}</option>`);
                });
            },
            error: function() {
                showAlert('error', "Failed to load units");
            }
        });
    }
    
    // Helper functions
    function updateHiddenInputs(containerId, selectedGroups, inputName) {
        const container = $("#" + containerId);
        container.empty();
        selectedGroups.forEach(id => {
            container.append(`<input type="hidden" name="${inputName}" value="${id}">`);
        });
    }
    
    function updateEditDropdownButtonText() {
        const button = $("#EditModifierGroupDropdown");
        
        if (editSelectedModifierGroups.length === 0) {
            button.text("Select Modifier Group");
        } else {
            const names = [];
            $(".edit-modifier-group-checkbox:checked").each(function() {
                names.push($(this).data('name'));
            });
            button.text(names.join(", "));
        }
    }
    
    function validateEditForm() {
        if ($("#EditModifierName").val().trim() === "") {
            showAlert('error', 'Please enter a modifier name');
            return false;
        }
        if (editSelectedModifierGroups.length === 0) {
            showAlert('error', 'Please select at least one modifier group');
            return false;
        }
        if ($("#EditUnitSelect").val() === "") {
            showAlert('error', 'Please select a unit');
            return false;
        }
        return true;
    }
    
  
    function showAlert(type, message) {
        // Implement your alert/notification system here
       // alert(type + ": " + message);
       
        toastr.type(message)
    }

</script>
