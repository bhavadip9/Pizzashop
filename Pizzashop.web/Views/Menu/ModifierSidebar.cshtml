
@model Pizzashop.entity.ViewModels.AddPaginationViewmodel<Pizzashop.entity.ViewModels.AddModifierViewModel>


<div id="Addpage"></div>
<div id="modalBody"></div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th><input id="selectModifierAll" class="form-check-input main-checkbox" type="checkbox"></th>
                <th>Name</th>
                <th>Unit</th>
                <th>Rate</th>
                <th>Quantity</th>
                 @if((bool)Context.Items["CanAddEdit"] == true || (bool)Context.Items["CanDelete"] == true ){
                <th>Action</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Model.Items.Any())
            {
                foreach (var item in Model.Items)
                {
                    <tr>
                        <td><input value="@item.ModifierId" class="form-check-input main-checkbox row-checkbox delete-checkbox123" type="checkbox"></td>

                        <td class="d-flex gap-2 align-content-center">
                            <p>@item.ModifierName</p>
                        </td>
                        <td >
                            <p>@item.UnitName</p>
                        </td>
                        <td >@item.Rate.ToString("F2")â‚¹</td>
                        <td >@item.Quantity</td>

                        <td class="gap-3">
                               @if((bool)Context.Items["CanAddEdit"] == true ){
                            <button class="btn  edit-modifier-button" data-item-id="@item.ModifierId" data-bs-toggle="modal"
                                data-bs-target="#Editmodifier"><i class="bi bi-pen"></i> </button>}
                                   @if((bool)Context.Items["CanDelete"] == true ){
                            <button class="btn  delete-modifier-button" data-item-id="@item.MappingId"  data-bs-toggle="modal"
                                data-bs-target="#DeleteModifier"><i class="bi bi-trash"></i></button>}
                          
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="7" class="text-center">No records found.</td>
                </tr>
            }
        </tbody>
    </table>
        @if (Model.Items.Any())
                {
<div>
<div class="border-0" colspan="10">
                            <div class="d-flex align-content-center align-items-center justify-content-end">
                            <span>Items Per page: </span>
                            <div class="d-flex justify-content-end align-items-center">
                                <div>
                                <select class="form-select ms-2 page-list" id="ModifierTableSizeSelect" asp-for="PageSize" onchange="paginationModifier()">
                                    <option value="2" selected="@((Model.PageSize == 2) ? "selected" : null)">2</option>
                                    <option value="5" selected="@((Model.PageSize == 5) ? "selected" : null)">5</option>
                                    <option value="10" selected="@((Model.PageSize == 10) ? "selected" : null)">10</option>
                                    <option value="15" selected="@((Model.PageSize == 15) ? "selected" : null)">15</option>
                                </select>
                                </div>

                                <div class="ms-3">
                                    <span>
                                        Showing 
                                        <span id="startUser">@((Model.CurrentPage - 1) * Model.PageSize + 1)</span> -
                                        <span id="endUser">@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount)</span> of
                                        <span id="totalUser">@Model.TotalCount</span>   
                                    </span>
                                </div>
                                <div class="m-2">
                                <button class="page-link btn bg-primary" id="prev"  onclick="pageChangeModifier('prev')" @(Model.CurrentPage
                                                    == 1 ? "disabled" : "") aria-label="Previous" id="previous_page">
                                <i class="bi bi-chevron-left text-white" aria-hidden="true"></i>
                                </button>
                                </div>
                                <div class="m-2">
                                    <button class="page-link btn bg-primary " id="next" onclick="pageChangeModifier('next')" @((Model.CurrentPage
                                                    *Model.PageSize >= Model.TotalCount) ? "disabled" : "") aria-label="Next" id="next_page">
                                        @* <i class="fa-solid fa-forward" aria-hidden="true"></i> *@
                                        <i class="bi bi-chevron-right text-white"></i>
                                    </button>
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    }
</div>


<partial name="_EditModifierItemPV" model="new Pizzashop.entity.ViewModels.AddModifierViewModel()" />
<partial name="_DeleteModifierItemPV" model="new Pizzashop.entity.ViewModels.AddModifierViewModel()" />






<script>

function paginationModifier() {
            var value = parseInt($("#ModifierTableSizeSelect").val());
            ModifierpageSize = value;
            let totalPagesModifier = Math.ceil(@Model.TotalCount / ModifierpageSize);
            if (currentPageModifier > totalPagesModifier) {
                currentPageModifier = totalPagesModifier > 0 ? totalPagesModifier : 1;
            }
            modifierItem(currentModifierGroup, currentPageModifier, ModifierpageSize, Modifiersearch)
        }

    function pageChangeModifier(pageAction) {

        if (pageAction == 'prev') {
            currentPageModifier = currentPageModifier === 1 ? 1 : --currentPageModifier;
        }
        else {
            currentPageModifier = (currentPageModifier * ModifierpageSize) > @Model.TotalCount ? currentPageModifier : ++currentPageModifier;
        }
        modifierItem(currentModifierGroup, currentPageModifier, ModifierpageSize, Modifiersearch)
    }
$(document).ready(function(){


    $("#selectModifierAll").click(function () {
        $(".delete-checkbox123").prop("checked", this.checked);
    });

       $(".delete-checkbox123").change(function () {
    let totalCheckboxes = $(".delete-checkbox123").length;
    let totalChecked = $(".delete-checkbox123:checked").length;

    $("#selectModifierAll").prop('checked', totalCheckboxes === totalChecked);
});
  
})


  


    $('.delete-modifier-button').click(function () {
        debugger
        var itemId = $(this).data('item-id');
        $('#DeleteModifierItem').submit(function (e) {
            e.preventDefault(); // Prevent the default form submission
            DeleteModifier(itemId);
        });
    });


    function DeleteModifier(itemId) {
         $.ajax({
            url: '/Menu/_DeleteModiferItemPV',
            type: 'POST',
            data: { id: itemId },
            success: function (response) {
                console.log(response);

                if (response) {
                    $('#DeleteModifier').modal('hide');

                    
                    location.reload();
                     modifierItem(currentModifierGroup, currentPageModifier, ModifierpageSize, Modifiersearch)
                    @* $('#ModifierName').val(response.modifierName);
                    $('#ModifierId').val(response.modifierId); *@
                } else {
                    alert('Item not found.');
                }
            },
            error: function () {
                alert('An error occurred while fetching item details.');
            }
        });

    }
   


    function GetItems() {
        $.ajax({

            url: '/Menu/GetAllCategory',
            type: 'GET',
            dataType: 'json',
            success: function (data) {

                var options = '<option value="-1">Category</option>';
                $.each(data, function (index, category) {
                    options += '<option value="' + category.categoryId + '">' + category.categoryName + '</option>';
                });


                $("#CategorySelect").html(options);
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error);
                $("#CategorySelect").html('<option value="-1">Failed to load categories</option>');
            }
        });
    }
    function GetUnitsforModifier() {
        $.ajax({

            url: '/Menu/GetAllUnit',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                console.log("Response Data:", data);

                var options = '<option value="-1">Unit</option>';
                $.each(data, function (index, unit) {
                    options += '<option value="' + unit.unitId + '">' + unit.unitName + '</option>';
                });


                $("#UnitSelect").html(options);
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error);
                $("#UnitSelect").html('<option value="-1">Failed to load categories</option>');
            }
        });
    }
   

</script>
